---
- name: Execute RedHat OS family specific install
  include: RedHat.yml
  when: ansible_os_family == 'RedHat'

- name: Execute Debian OS family specific install
  include: Debian.yml
  when: ansible_os_family == 'Debian'

- name: mount the riak volume with optmized settings
  mount: name={{ riak_mountpoint }} src={{ riak_partition }} opts="{{riak_mount_options}}" fstype="{{riak_filesystem}}" state=mounted
  when: riak_tune_disks

- name: create script with disk tuning commands
  template: src=riak_disk_tune.sh.j2 dest=/usr/local/bin/riak_disk_tune.sh owner=root group=root mode=0755
  notify: run riak_disk_tune
  when: riak_tune_disks

- name: add line to rc.local to call riak_disk_tune on boot
  lineinfile: 'dest=/etc/rc.local line="if [ -x /usr/local/bin/riak_disk_tune.sh ]; then /usr/local/bin/riak_disk_tune.sh; fi" insertbefore="^exit 0"'
  when: riak_tune_disks

- name: create sysctl.d
  file: dest=/etc/sysctl.d state=directory

- name: configure sysctl
  template: src=etc_sysctl.d_riak.conf.j2 dest=/etc/sysctl.d/riak.conf owner=root group=root mode=0644

- name: copy custom beams
  synchronize: "src={{ riak_custom_beams_dir }} dest={{ riak_patch_dir }}"
  when: riak_custom_beams_dir is defined

- name: install riak.conf with templated configuration
  template: "src={{ riak_conf_template }} dest=/etc/riak/riak.conf owner=root group=root mode=0444 backup=yes"

- name: install advanced.config if template is defined
  template: "src={{ riak_advanced_config_template }} dest=/etc/riak/advanced.config owner=root group=root mode=0444 backup=yes"
  when: riak_advanced_config_template is defined

- name: install riak_shell.config with templated configuration
  template: "src={{ riak_shell_conf_template }} dest=/etc/riak/riak_shell.config owner=root group=root mode=0444"
  when: riak_package == "riak-ts" and riak_shell_nodes is defined

- name: Remove Riak data to start with a clean state
  file:
    dest: /var/lib/riak
    state: absent
  when: riak_clean_state == 'true'

- name: Reboot Riak to accept the new config and ensure it is enabled to start at bootup
  # service: name=riak enabled=yes state=restarted
  systemd: state=restarted daemon_reload=yes name=riak enabled=yes
  when: riak_init_system == 'system'
  # when: '(ansible_distribution_release == "xenial" or ansible_distribution_release == "jessie") and (riak_init_system == "system")'
  # changed_when: False ## This is a workaround for not disrupting idempotency. The proper idempotency fix would be running the task only when the relevant config files changed.

- name: Reboot Riak to accept the new config and ensure it is enabled to start at bootup
  command: sv restart riak
  when: riak_init_system == 'runit'

- name: Wait for Riak to start up before continuing
  wait_for: "delay=5 timeout=30 host={{ riak_pb_bind_ip }} port={{ riak_pb_port }} state=started"

- name: Search operations
  include: search.yml
  when: riak_search == 'on'

- name: Bucket operations
  include: buckets.yml

- name: Security operations
  include: security.yml
